import { Location } from '@angular/common';
import { HttpParams } from '@angular/common/http';
import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from '@angular/forms';
import { MatRadioChange } from '@angular/material/radio';
import { ActivatedRoute, Router } from '@angular/router';
import { faHandPointLeft, faPlusCircle } from '@fortawesome/free-solid-svg-icons';
import { Boolean } from 'aws-sdk/clients/apigateway';
import * as _moment from 'moment';
import { Subscription } from 'rxjs';
import { ApiService } from 'src/app/services/api.service';
import { ErrorDialogService } from 'src/app/services/error-dialog.service';
import { SnackbarService } from 'src/app/services/snackbar.service';
import { ValidateNumber } from '../../validators/number.validator';

const moment =  _moment;
@Component({
	selector: 'app-add-transaction-type',
	templateUrl: './add-transaction-type.component.html',
	styleUrls: ['./add-transaction-type.component.css']
})
export class AddTransactionTypeComponent implements OnInit, OnDestroy {
	private subscriptions: Subscription[] = [];
	
	faPlusCircle = faPlusCircle;
	faHandPointLeft = faHandPointLeft;
    selectedFile : null;
	url;
	loggedInUser;
	role;
	entity;
	transTypeForm: FormGroup;
	metadataFields = {};
	recordPerPage= 5;
	currentPage = 1;
	datefields=[];
	fieldKey = [];
	fieldKeyValue=[];
	staticFieldKey = [];
	fieldValue = [];
	keys = [];
	modules;
	transactionTypes;
	fieldLengthErr:boolean = false;
	orderReference :boolean = false;
	favorite;
	favoriteSeason: string;
	defaultTransaction: string;
	defaultTransRole: string;
	defaultOrderRef: string;
	defaultAssetType: string;
	defaultstring: string[] = ['String'];
	seasons : string[] = ['String', 'Number', 'Date', 'JSON', 'File'];
	transactions : string[] = ['Asset', 'Order'];
	transRoles : string[] = ['Physical', 'Digital'];
	orderReferences : string[] = ['Internal', 'Partner'];
	assetTypes: string[] = ['Receive Asset', 'Consume Asset'];
	isHashField: Boolean = true;
	is_line_level: Boolean = false;
	is_outside_level: Boolean = false;
	isSerialized: Boolean = true;
	isProvenance: Boolean = true;
	isVerifiable: Boolean =  false;
	assetWithoutReference: Boolean = false;
	transRole : string;
	epr: Boolean = false;
	eprReceive: Boolean = false;
	eprConsume: Boolean = false;
	eprPrint: Boolean = false;
	nft: Boolean = false;
	autogeneratedField: Boolean = false;
	autogeneration = false;
	checkbox = false;
	checked = false;
    viewPDF = false;
	checkedreview = false;
    checkedcertify = false;
    checkedapprove = false;
	checkedasset = false;
	checkedinput = false;
	checkedserialized = false;
	checkedexpiry = false;
	checkedprovenance = false;
	checkedVerifiable = false;
    checkedPublic = false;
	value: any;
	date_time: _moment.Moment;
	date: any;
	time: any;
	selectSeason: string;
	name: any;
	filename: any;
	files: any;
	allFalse = [];
	booleanValue : Boolean;
	alertFlag : Boolean;
	booleanValuee : Boolean;
	credImg: '';
	isActive: any;
	fields: string;
	fileData: File = null;
	moduleName=''
	previewUrl:any = null;
	fileUploadProgress: string = null;
	uploadedFilePath: string = null;
	selection: boolean = false;
	staticFileTemplate: any;
	file: any;
	pdfurl: string;
	filePreview: string;
	credFileType: any;
	credFileHeight: any;
	credFileWidth: any;
	modulesList = [];
	transactionTypesList = [];
	showCanvases:boolean = false;
	htmlfilename: any;
	transactionTypeCode: any;
	totalRecord: any;
	defaultTransactionTypeID: number;
	lastTransactionTypeCode: any;
	arrayCount: number;
	id: any;
	transTypeData: any;
	selected: any;
	selectedRefTransType: any;
	selectedFromToEntity:any;
	showReference: boolean =false;
	readOnlyNumber: boolean = false;
	dataMapArr:any;
	fieldKeyArr=[];
	curPage:any=1;
  	orgPerPage:any=5;
	check1:Boolean=false;
	check2:Boolean=false;
	constructor(private _formBuilder: FormBuilder,
		private apiService: ApiService,
		private route: ActivatedRoute,
		public router: Router,
		public errorDialogService: ErrorDialogService,
		private location: Location,
		public snackbarService: SnackbarService,
		public validateNumber: ValidateNumber,
		) { }

		public noWhitespaceValidator(control: FormControl) {
			const isWhitespace = (control.value || '').trim().length === 0;
			const isValid = !isWhitespace;
			return isValid ? null : { 'whitespace': true };
		}

	ngOnInit() {
		this.defaultTransactionTypeID = 1001,
		this.loggedInUser = JSON.parse(sessionStorage.getItem('user'));
		this.curPage = this.route.snapshot.queryParams['currentPage'];
		this.orgPerPage = this.route.snapshot.queryParams['recordPerPage'];
		this.role = this.loggedInUser.reference.role;
		this.entity = this.loggedInUser.reference.entity;
		this.id = this.route.snapshot.params['id'];
		
		this.transTypeForm = this._formBuilder.group({
			transactionTypeCode : [{disabled: true},],
			type: ['', [Validators.required,Validators.pattern('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$')]],
			additionalDescription: ['',[Validators.required,Validators.pattern('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$')]],
			refModule: (['']),
			refTransactionType: (['']),
			transactionTypePrefix: ['', [Validators.required,Validators.pattern('^[A-Za-z][A-Za-z]*$'),this.noWhitespaceValidator]],
			transactionTypeAutoNumber: ['', [Validators.required]],
			fields:['', [Validators.pattern('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$')]],
			isHashField : (['']),
			is_line_level : (['']),
			is_outside_level: (['']),
			isSerialized : (['']),
			isProvenance : (['']),
			isVerifiable : (['']),
			assetWithoutReference : (['']),
			transRole : (['']),
			epr : (['']),
			eprReceive : (['']),
			eprConsume : (['']),
			eprPrint : (['']),
			nft : (['']),
			isFromToEntity : (['']),		
			autogeneratedField : (['']),			
			createPDF: [''],
			bypassReview: [''],
			isExpiry: [''],
			inputAsset: [''],
			viewPDF: [''],
			Public: [''],
			Verify: [''],
			landscapeLayout:[''], 
			favorite: new FormControl(''),
			transaction: new FormControl(''),
			orderRef: new FormControl(''),
			assetType: new FormControl(''),
			credImg: [''],
			filename : [''],
			htmlfilename : [''],
			staticFileTemplate: ['']
		});
		
		//this.getModules();
		this.getModules()
					.then((dataReturn: any) => {
						if(dataReturn.length>0){
							if(dataReturn!=undefined){
								this.modulesList = dataReturn
								if(this.id==undefined){
									this.getAllTransType(this.recordPerPage, 1);
								}		
								this.favoriteSeason = 'String';
								this.defaultTransaction = 'Asset';
								this.defaultTransRole = 'Physical';
								
								if (this.defaultTransaction == 'Order'){
									this.defaultAssetType = 'Receive Asset';
								} else if (this.defaultTransaction == 'Order') {
									this.defaultAssetType = 'Produce Asset';
								} else {
									this.defaultAssetType = '';
								}	
								if(this.id!=undefined){
									this.getTransTypeByID();
									this.readOnlyNumber = true;
								}
							}
						}else{
						}            
					})
					.catch((error) => {
					}); 
		
	}

	public hasError = (controlName: string, errorName: string) =>{
		return  this.transTypeForm.controls[controlName].hasError(errorName);
	}
	onCheckValue(e){
		if (e.source.id == "check1id") {
			this.check1= true;
			this.check2 = false;
		}else if (e.source.id == "check2id") {
			this.check2 = true;
			this.check1= false;
		}
	}
	getTransTypeByID() {  
		this.url = '/transtype/' + this.id ;
		var params = new HttpParams();
		params = params.append('id', this.id);

		this.subscriptions.push(this.apiService.get(this.url, params)
			.subscribe((response: any) => {
			if(response.success == true){
				this.transTypeData = response.data.transType;
				this.transTypeData.refTransactionType = this.transTypeData.refTransType;
				this.transTypeData.type = this.transTypeData.transactionTypeName;
				this.transTypeData.transactionTypeAutoNumber = this.transTypeData.transactionTypeAutoNumber;
				this.defaultTransactionTypeID = this.transTypeData.transactionTypeAutoNumber;
				this.transTypeData.isFromToEntity = this.transTypeData.fromToEntity;

				this.defaultAssetType = this.transTypeData.assetType;
				this.defaultOrderRef = this.transTypeData.orderReference;			
				this.checkedserialized = this.transTypeData.serialized;
				this.checkedinput = this.transTypeData.inputAsset;
				this.checkedexpiry = this.transTypeData.isExpiry;
				this.checkedprovenance = this.transTypeData.provenance;
				this.checkedVerifiable = this.transTypeData.verifiable;
				this.assetWithoutReference = this.transTypeData.assetWithoutReference;				
				this.transRole = this.transTypeData.transRole;
				this.epr = this.transTypeData.epr;
				this.eprReceive = this.transTypeData.eprReceive;
				this.eprConsume = this.transTypeData.eprConsume;
				this.eprPrint = this.transTypeData.eprPrint;
				this.nft = this.transTypeData.nft;
				this.fieldKey = this.transTypeData.fields;
				var vals = []
				this.fieldKey.forEach((value,index)=>{
					vals[index] = this.fieldKey[index][0];
				})
				this.fieldKeyValue = vals
    
				if(this.fieldKeyValue?.length > 0){
					const controlfields = <FormControl>this.transTypeForm.get('fields');
					controlfields.clearValidators()
						const control = this.transTypeForm.controls['fields'];
						control.setErrors(null);
				}
				this.transTypeData.fields = '';
				this.transTypeForm.patchValue(this.transTypeData);
				if(this.transTypeData.refModule!="" && this.transTypeData.refModule!=null && this.transTypeData.refModule!=undefined){
					this.getTransTypeByModuleId(this.transTypeData.refModule,this.modulesList)
					.then((dataReturn: any) => {
						if(dataReturn.length>0){
							if(dataReturn!=undefined){
								this.transactionTypesList = dataReturn
								this.selected = this.transTypeData.refModule;
								this.selectedFromToEntity = this.transTypeData.fromToEntity;
								this.selectedRefTransType = this.transTypeData.refTransType;
							}
						}else{
						}            
					})
					.catch((error) => {
					}); 
				}	
			}
		}))
	};

	addFields1() {
		for (var key in this.metadataFields) {
			if (this.metadataFields.hasOwnProperty(key) && (key != this.transTypeForm.value.fields)) {
				this.metadataFields[this.transTypeForm.value.fields] = '';
			}
		}

		for(var i=0;i<this.fieldKey.length;i++) {
			if(this.fieldKey[i] != key && this.fieldKey[i] != this.transTypeForm.value.fields) {
				this.fieldKey.push(key);
			}
		}
	}
	validateF(event){
		const controlfields = <FormControl>this.transTypeForm.get('fields');
		controlfields.setValidators([Validators.pattern('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$')]);
	}
	addFields() {
		const controlfields = <FormControl>this.transTypeForm.get('fields');
		controlfields.setValidators([Validators.pattern('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$')]);
	
		const dynamicfields = this.fieldKeyValue.length;
		if(dynamicfields == 0){
			controlfields.clearValidators();
		}else{
			controlfields.setValidators([Validators.pattern('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$')]);
		}
		
		var dataFields = {};
		var name = [];
		var value = [];
		var transactionidField = [];
		var autogeneratedFieldArray = [];
		var startingArray = [];
		var transactionid = [];
		var isLineLevel = [];
		var isOutsideLevel = [];
		var newValue;
		newValue = this.transTypeForm.value.fields.match('^(?! )(?!.* $)[A-Za-z0-9][A-Za-z0-9 ]*$');
		if (newValue) {
			if(this.transTypeForm.value.favorite == 'Date' || this.transTypeForm.value.favorite == 'JSON' || this.transTypeForm.value.favorite == 'File' ){
				this.transTypeForm.value.isHashField = false;
			}else{
				this.transTypeForm.value.isHashField = this.transTypeForm.value.isHashField;
			}
			name.push(this.transTypeForm.value.fields);
			value.push(this.transTypeForm.value.favorite);
			transactionidField.push(this.transTypeForm.value.isHashField);
			isLineLevel.push(this.transTypeForm.value.is_line_level);
			isOutsideLevel.push(this.transTypeForm.value.is_outside_level);
			autogeneratedFieldArray.push(this.transTypeForm.value.autogeneratedField);
			var dataMap = value.map((v,i) => ({"key": name[i], "value":v, "is_line_level": isLineLevel[i],"is_outside_level": isOutsideLevel[i]}))
			this.metadataFields[this.transTypeForm.value.fields] = this.transTypeForm.value.favorite;
			this.fieldKey.push(dataMap);
			dataMap.forEach((value,index)=>{
				this.dataMapArr = value;
			})
			if(this.fieldKeyValue){
				this.fieldKeyValue.push(this.dataMapArr);
			}
			this.fields = '';
			this.transTypeForm.markAsUntouched();
		} else {
		}
  }
	removeFromList(index) {
		this.fieldKeyValue.splice(index,1);
		if(!this.fieldKeyValue.length){
			const controlfields = <FormControl>this.transTypeForm.get('fields');
			controlfields.setValidators([Validators.required]);
		}
	}
	getModules() {
		var promise = new Promise(async (resolve, reject) => {
			try {
				this.url = "/module/moduleList";
				this.isActive = true;
				var params = new HttpParams();				
					this.subscriptions.push(this.apiService.get(this.url, params)
						.subscribe((response: any) => {   
							var returnArr = []  
							if (response.success) {
								this.modules = response.data.modules;
									if (response.success) {
										var moduleList = [];
										var moduleArray = response.data;
										for (var i = 0; i < moduleArray.length; i++) {
											if ('organizationId' in moduleArray[i]){
											} else {
												moduleList.push(moduleArray[i]);
											}											
										}
									}
										returnArr = moduleList
										resolve(returnArr);					
							}else{
								resolve(returnArr);		
							}   
					}))
				} catch (error) {
					reject(error);
				}
			});
			return promise;		
	}

	getTransTypeByModuleIdList(moduleCode) {
		if(moduleCode!=undefined){
			this.transactionTypesList = [];
			let module
			for (var i = 0; i < this.modulesList.length; i++) {
				if(moduleCode==this.modulesList[i].code){
					module = this.modulesList[i];
				}
			}
			this.moduleName = moduleCode;
			if (module!=undefined) {
				this.url = "/transactiontype/list";
				var params = new HttpParams();
				params = params.append('moduleId', module._id);
				params = params.append('pagesize', '200');
				params = params.append('page', '1');

				this.subscriptions.push(this.apiService.get(this.url, params)
					.subscribe((response: any) => {
						if (response.success == true) {
							if (response.data.result && response.data.result.transtypes) {
								this.transactionTypesList = response.data.result.transtypes.transtypes;
								if(this.id!=undefined){
									this.orderReference = true;
								}
							}
						}
					}))
			}
		}
	}

	getTransTypeByModuleId(moduleCode,modulesList) {  
		var promise = new Promise(async (resolve, reject) => {
		try {
			this.transactionTypesList = [];
			let module
			for (var i = 0; i < modulesList?.length; i++) {
				if(moduleCode==modulesList[i]?.code){
					module = modulesList[i];
				}
			}
			this.moduleName = moduleCode;
			this.url = "/transactiontype/list";
			var params = new HttpParams();	
			params = params.append('moduleId', module?._id);
            params = params.append('pagesize', '200');
            params = params.append('page', '1');			
		this.subscriptions.push(this.apiService.get(this.url, params)
			.subscribe((response: any) => {  
				var returnArr = []         
					if(response.data.result.isError){
						resolve(returnArr);					
					}else{           
							if (response.success == true) {
								if (response?.data?.result && response.data?.result?.transtypes) {
									if(this.id!=undefined){
										this.orderReference = true;
									}
								}
							}
							returnArr = response.data?.result?.transtypes?.transtypes
					}
					resolve(returnArr);
        }))
			} catch (error) {
				reject(error);
			}
		});
		return promise;
	};
	
	getOrderReference(){
		this.orderReference = true;
	}

	addTransactionType(transactionType) {
		var dynamicfields = this.fieldKeyValue.length;
		const controlfields = <FormControl>this.transTypeForm.get('fields');		
  
		if (transactionType.invalid) {
			var dynamicfielddata = {
				reason: "Please enter all mandatory fields!",
				status: ''
			};
			this.errorDialogService.openDialog(dynamicfielddata);
			return true;
		} else {
				if(dynamicfields == 0){
					let ctrfields = <FormControl>this.transTypeForm.get('fields');
					ctrfields.setValidators([Validators.required]);
					ctrfields.updateValueAndValidity()
					var dynamicfielddata = {
						reason: "Please Enter at least one Dynamic Field!",
						status: ''
					};
					this.errorDialogService.openDialog(dynamicfielddata);
					return true;
				}
				if(dynamicfields > 0){
					controlfields.clearValidators()
					const control = this.transTypeForm.controls['fields'];
					control.setErrors(null);
				}
		}

		if(transactionType.form.controls.transactionTypePrefix.invalid && transactionType.form.controls.transactionTypeAutoNumber.invalid) {
			return;
		}
		this.staticFieldKey.push([{"key": 'Organization Name', "value":'', "xcor":'',"ycor":'',"fontsize":'12px',"color":''}],
			[{"key": 'Module Name', "value":'', "xcor":'',"ycor":'', "fontsize":'12px',"color":''}],
			[{"key": 'Transaction Type', "value":'', "xcor":'',"ycor":'', "fontsize":'12px',"color":''}],
			[{"key": 'QR Code', "value":'', "xcor":'',"ycor":'', "fontsize":'12px',"color":''}],
			[{"key": 'Transaction ID', "value":'', "xcor":'',"ycor":'', "fontsize":'12px',"color":''}],
			[{"key": 'Partner Name', "value":'', "xcor":'',"ycor":'', "fontsize":'12px',"color":''}]);

		transactionType.value.staticFields = this.staticFieldKey;
		transactionType.value.fields = this.metadataFields;
		
		if(transactionType.value.moduleId !== '' && transactionType.value.type == ''){
			return false;
		} else if(transactionType.value.fields == '') {
			return false;
		}
		
		var allHashValues = [];
		var minOneField : any;
		
		for (let i = 0, len = this.fieldKey.length; i < len; i++) {
			var obj = this.fieldKey[i][0];
			var transactionidValue = Object.values(obj)[2];
			allHashValues.push(transactionidValue);
			var allFalseA = !allHashValues.some(x => x === true); 
			this.booleanValue = allFalseA;
		}
		if(this.booleanValue == true && this.defaultTransaction == 'Transaction'){
			var dataForHash = {
				reason: "Please select atleast one true transactionid!",
				status: ''
			};
			this.errorDialogService.openDialog(dataForHash);
			return true;
		}
		for (let i = 0, len = this.fieldKeyValue.length; i < len; i++) {
			var obj = this.fieldKeyValue[i];
			var transactionidValue = Object.values(obj)[2];
			allHashValues.push(transactionidValue);
			var allFalseAB = !allHashValues.some(x => x === false); 
			this.booleanValuee = allFalseAB;				
		}
		this.fieldKeyValue.forEach((value,index)=>{
			this.fieldKeyArr[index] = [value]
		})
		if (this.checkedasset) {
			this.defaultAssetType = "Produce Asset"
		}
		
		var data = {
			organizationId: this.loggedInUser.reference.organizationId,
			departmentId: this.loggedInUser.reference.departmentId,
			moduleId: transactionType.value.moduleId,
			transactionTypeName: transactionType.value.type,
			additionalDescription: transactionType.value.additionalDescription,
			transactionTypePrefix: transactionType.value.transactionTypePrefix,
			transactionTypeAutoNumber: transactionType.value.transactionTypeAutoNumber,
			assetWithoutReference: this.assetWithoutReference,
			transRole: this.defaultTransRole,
			epr: this.epr,
			eprReceive: this.eprReceive,
			eprConsume: this.eprConsume,
			eprPrint: this.eprPrint,
			nft: this.nft,
			orderType: transactionType.value.orderType,
			transactionTypeCode:transactionType.value.transactionTypeCode,
			landscapeLayout: transactionType.value.landscapeLayout,
			credImg: this.filename,
			credFileType: this.credFileType,
			credFileWidth: this.credFileWidth,
			credFileHeight: this.credFileHeight,
			staticCredImg : this.staticFileTemplate,
			pdffield: this.checked,
			viewPDF: this.viewPDF,
			review: this.checkedreview,
			certify: this.checkedcertify,
			approve:this.checkedapprove,
			asset: this.checkedasset,
			transaction: this.defaultTransaction,
			orderReference: this.defaultOrderRef,
			serialized: this.checkedserialized,
			expiry: this.checkedexpiry,
			inputAsset: this.checkedinput,
			provenance:this.checkedprovenance,
			verifiable:this.checkedVerifiable,
			htmlFile: this.htmlfilename,
			assetType:this.defaultAssetType,
			fromToEntity: transactionType.value.isFromToEntity,
			isPublic: this.checkedPublic,
			fields: this.fieldKeyArr,
			staticFields: this.staticFieldKey,
			length:transactionType.value.length,
			startingnumber:transactionType.value.startingnumber,
			refModule: transactionType.value.refModule,
			refTransType: transactionType.value.refTransactionType,
			createdBy : {
				firstName:this.loggedInUser.firstName,
				lastName:this.loggedInUser.lastName,
				email:this.loggedInUser.email
			},
			updatedBy : {
				firstName:this.loggedInUser.firstName,
				lastName:this.loggedInUser.lastName,
				email:this.loggedInUser.email
			}
		};
		if(this.id==undefined){
			this.url = '/transtype/create';
			this.subscriptions.push(this.apiService.post(this.url, data)
			.subscribe((response: any) => {
				if(response.success == true) {
					this.snackbarService.openSuccessBar('Your Transaction Type added successfully.', "Transaction Type");
					this.router.navigate(['/transactionTypes/listTransactionType']);
				}
			}))
		}else{
			this.url = "/transtype/updateTransType/" + this.id;
			this.apiService.put(this.url,data)
				.subscribe((response) => {
					if(response.success == true) {
						this.snackbarService.openSuccessBar('Your Transaction Type updated successfully', "Transaction Type");
						this.router.navigate(['/transactionTypes/listTransactionType']);
					}
				});
		}	
	}

	getAllTransType(recordPerPage, currentPage) {
		this.url = '/transtype/list';		
		var params = new HttpParams();		
		params = params.append('organizationId', this.loggedInUser.reference.organizationId);
		params = params.append('pagesize', recordPerPage);
		params = params.append('page', currentPage);
		this.subscriptions.push(this.apiService.get(this.url, params)
			.subscribe((response: any) => {	
				this.totalRecord = response.data.result.totalCount;
				this.arrayCount = parseInt(this.totalRecord) - 1;
				this.lastTransactionTypeCode = response.data.result.transtypes[0].transactionTypeCode;
				if( this.totalRecord == 0){
					this.defaultTransactionTypeID = this.defaultTransactionTypeID;
				}else{
					let lastTypeCode = parseInt(this.lastTransactionTypeCode)
					this.defaultTransactionTypeID = lastTypeCode ++;
					this.defaultTransactionTypeID++;
				}
		}))
	}

	radioChange($event: MatRadioChange) {
		this.transTypeForm.get('refModule').reset();
		this.transTypeForm.get('refTransactionType').reset();
		this.transTypeForm.get('isFromToEntity').reset();
		this.transTypeForm.get('isSerialized').reset();
		this.transTypeForm.get('inputAsset').reset();
		this.transTypeForm.get('isExpiry').reset();
		this.transTypeForm.get('isProvenance').reset();
		this.transTypeForm.get('isVerifiable').reset();
		this.transTypeForm.get('epr').reset();
		this.transTypeForm.get('eprReceive').reset();
		this.transTypeForm.get('eprConsume').reset();
		this.transTypeForm.get('eprPrint').reset();
		this.transTypeForm.get('assetWithoutReference').reset();
		this.transTypeForm.get('orderRef').reset();
		this.transTypeForm.get('eprPrint').reset();
		this.transTypeForm.get('nft').reset();
	}

	changeFromEntity(e) {
		if(e!="reference" && e!=undefined){
			this.transTypeForm.get('refModule').reset();
			this.transTypeForm.get('refTransactionType').reset();
		}	
	}

	goBack() {
		this.router.navigate(['/transactionTypes/listTransactionType/'],{ queryParams: { currentPage: this.curPage, recordPerPage: this.orgPerPage}});
	};
	ngOnDestroy() {
		this.subscriptions.forEach(subscription => subscription.unsubscribe());
	};

	validateNo(e){
		this.validateNumber.validateNo(e);
	  }
}